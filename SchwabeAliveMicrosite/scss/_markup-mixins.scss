@mixin background-opacity($color, $opacity: 0.3) {
	background: $color;
	background: rgba($color, $opacity);
}
%listreset{
	margin: 0;
	padding: 0;
	list-style: none;
}
%clearfix {
	&:after {
		content: " ";
		display: block;
		clear: both;
	}
}

@mixin form-placeholder($v1) {
	::-webkit-input-placeholder{
		color: $v1;
		font-style:italic;
		font-weight:normal;
	}
	:-moz-placeholder{
		color: $v1;
		font-style:italic;
		font-weight:normal;
	}
	::-moz-placeholder{
		color: $v1;
		opacity:1;
		font-style:italic;
		font-weight:normal;
	}
	:-ms-input-placeholder{
		color: $v1;
		font-style:italic;
		font-weight:normal;
	}
}
@mixin linear-gradient($fromColor, $toColor) {
	background-color: $fromColor;
	background-image: -webkit-linear-gradient($fromColor, $toColor);
	background-image:		-moz-linear-gradient($fromColor, $toColor);
	background-image:		 -ms-linear-gradient($fromColor, $toColor);
	background-image:			-o-linear-gradient($fromColor, $toColor);
	background-image:				 linear-gradient($fromColor, $toColor);
}
@mixin posa($t, $l) {
	position:absolute;
	left:$l;
	top:$t;
}
@mixin box-shadow($shadows...) {
	-webkit-box-shadow: $shadows;
	box-shadow: $shadows;
}
@mixin box-sizing($v1) {
	-webkit-box-sizing: $v1;
	-moz-box-sizing: $v1;
	box-sizing: $v1;
}
@mixin fontsize ($sizeValue){
	font-size: $sizeValue + px;
	font-size: ($sizeValue / 10) + rem;
}
@mixin icon{
	font-family:'icomoon';
	speak:none;
	font-style:normal;
	font-weight:normal;
	font-variant:normal;
	text-transform:none;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}
@mixin rotate($v1){
	-moz-transform: rotate($v1);
	-webkit-transform: rotate($v1);
	-o-transform: rotate($v1);
	-ms-transform: rotate($v1);
	transform: rotate($v1);
}
@mixin skewX($v1){
	-webkit-transform:skewX($v1);
	-moz-transform:skewX($v1);
	-ms-transform:skewX($v1);
	-o-transform:skewX($v1);
	transform:skewX($v1); 
}
@mixin translateX($v1) {
	-moz-transform: translateX($v1);
	-webkit-transform: translateX($v1);
	-o-transform: translateX($v1);
	-ms-transform: translateX($v1);
	transform: translateX($v1);
}

@mixin rotate-translate($r1, $v1) {
	-moz-transform: rotate($r1) translateX($v1);
	-webkit-transform: rotate($r1) translateX($v1);
	-o-transform: rotate($r1) translateX($v1);
	-ms-transform: rotate($r1) translateX($v1);
	transform: rotate($r1) translateX($v1);
}
// from http://codepen.io/MichaelArestad/pen/IxFGj 
@mixin arrow-lazy($al-direction: top, $al-size: 10px, $al-color: #ccc, $al-center: 50%, $al-margin: -1px, $al-pseudo: before){
	position: relative;
	border-color: $al-color;

	&:#{$al-pseudo} {
		position: absolute;
		content: "";
		width: 0;
		height: 0;
		border-color: $al-color;

		@if $al-direction == "right" {
				top: $al-center;
				left: 100%;
				margin-left: $al-margin;
				margin-top: $al-size * -1;
				border-top: $al-size solid transparent;
				border-bottom: $al-size solid transparent;
				border-left: $al-size solid $al-color;
				border-left-color: inherit;
		} @else if $al-direction == "down" {
				top: 100%;
				left: $al-center;
				margin-top: $al-margin;
				margin-left: $al-size * -1;
				border-left: $al-size solid transparent;
				border-right: $al-size solid transparent;
				border-top: $al-size solid $al-color;
				border-top-color: inherit;
		} @else if $al-direction == "left" {
				top: $al-center;
				right: 100%;
				margin-right: $al-margin;
				margin-top: $al-size * -1;
				border-top: $al-size solid transparent;
				border-bottom: $al-size solid transparent; 
				border-right:$al-size solid $al-color;
				border-right-color: inherit;
		} @else {
				bottom: 100%;
				left: $al-center;
				margin-bottom: $al-margin;
				margin-left: $al-size * -1;
				border-left: $al-size solid transparent;
				border-right: $al-size solid transparent;
				border-bottom: $al-size solid $al-color;
				border-bottom-color: inherit;
		}
	}
}
@mixin viewport{
	@-webkit-viewport{width:device-width;}
	@-moz-viewport{width:device-width;}
	@-ms-viewport{width:device-width;}
	@-o-viewport{width:device-width;}
	@viewport{width:device-width;}
}

@mixin breakpoint($point) {
 @if $point == $mobile {
  @media only screen and (max-width:$screen-xs-max) {
   @content;
  }
 }
 @else if $point == $tablet {
  @media only screen and (max-width:$screen-sm-max) {
   @content;
  }
 }
 @else if $point == $desktop {
  @media only screen and (max-width: $screen-lg) {
   @content;
  }
 }
 @else if $point == $screen1{
  @media only screen and (min-width:$screen-xs-max) and (max-width:$screen-sm-max) {
   @content;
  }
 }
}